<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Capscrap" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
  </head>

  <body class="bg-background text-text font-sans antialiased">
    <script>
      // On page load or when changing themes, best to add inline in `head` to avoid FOUC
      const savedMode = localStorage.getItem('display-mode');

      function applyMode(mode) {
        document.documentElement.classList.remove('dark', 'high-contrast');

        if (mode === 'dark') {
          document.documentElement.classList.add('dark');
        } else if (mode === 'high-contrast') {
          document.documentElement.classList.add('high-contrast');
        }
      }

      if (savedMode) {
        applyMode(savedMode);
      } else {
        // Default detection
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          localStorage.setItem('display-mode', 'dark');
          applyMode('dark');
        } else {
          localStorage.setItem('display-mode', 'light');
          applyMode('light');
        }
      }
    </script>

      <% if current_user %>
        <nav class="flex flex-wrap bg-primary px-4 py-2 shadow-md min-h-[3rem] items-center gap-2">
          <%# logo %>
          <%= image_tag "logo.png", class: "h-8 aspect-auto order-first" %>
          <%# spacer to push content to the middle %>
          <div class="flex-1 hidden lg:block"></div>
          <%# navigate to items depending on the user %>
          <% if current_user.role_id == 1 %>
            <%# student %>
            <div class="flex flex-wrap gap-2 w-full lg:w-auto order-last lg:order-none">
              <%= link_to "View Items", student_dashboard_items_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
            </div>
          <% end %>
          <% if current_user.role_id == 2 %>
            <%# teaching assistant %>
            <div class="flex flex-wrap gap-2 w-full lg:w-auto order-last lg:order-none">
              <%= link_to "View Items", ta_dashboard_items_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Users", ta_dashboard_users_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Renting", ta_dashboard_renting_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
            </div>
          <% end %>
          <% if current_user.role_id == 3 %>
            <%# teacher %>
            <div class="flex flex-wrap gap-2 w-full lg:w-auto order-last lg:order-none">
              <%= link_to "View Items", admin_dashboard_items_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Users", admin_dashboard_users_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Renting", admin_dashboard_renting_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Purchased", admin_dashboard_purchased_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
            </div>
          <% end %>
          <%# spacer to push content to the right %>
          <div class="flex-1 hidden lg:block"></div>

          <%# <div id="google_translate_element" class="mr-2"></div> %>


          <div id="google_translate_element" class="google-translate-container"></div>
            
          <script type="text/javascript">
            function googleTranslateElementInit() {
              new google.translate.TranslateElement({
                pageLanguage: 'en',          // Default page language is English
                includedLanguages: 'hi,nl,de,en,es,fr,it,ja,zh-CN',
                layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL,
                autoDisplay: false
              }, 'google_translate_element');
              
              // Force English on first visit if no language cookie exists
              if (!readCookie('googtrans')) {
                // English is actually the default, so we don't need to do anything here
                // But if you wanted to force another language by default, you could use:
                // document.cookie = 'googtrans=/en/fr; path=/; domain=' + document.domain;
              }
            }
            
            // Helper function to read cookies
            function readCookie(name) {
              var nameEQ = name + "=";
              var ca = document.cookie.split(';');
              for(var i=0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
              }
              return null;
            }
            
            // Add event listener to execute after page loads
            document.addEventListener('turbolinks:load', function() {
              // This ensures the widget reflects the saved language after page navigation with Turbolinks
              if (window.google && window.google.translate) {
                // Refresh the Google Translate widget if needed
                if (typeof window.google.translate.TranslateElement !== 'undefined') {
                  new google.translate.TranslateElement({
                    pageLanguage: 'en',
                    includedLanguages: 'hi,nl,de,en,es,fr,it,ja,zh-CN',
                    layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL,
                    autoDisplay: false
                  }, 'google_translate_element');
                }
              }
            });
          </script>

          <style>
            /* Custom styles for Google Translate */
            .google-translate-container {
              margin-right: 0px;
            }
            
            /* Style the Google Translate dropdown */
            .goog-te-gadget {
              font-family: inherit !important;
              font-size: 0.875rem !important;
            }
            
            /* Hide all text in the gadget except the dropdown */
            .goog-te-gadget-simple .goog-te-menu-value span:first-child,
            .goog-te-gadget-simple .goog-te-menu-value span:last-child,
            .goog-te-gadget .goog-te-combo + span,
            .goog-te-gadget span {
              display: none !important;
            }
            
            /* Make sure the dropdown itself is still visible */
            .goog-te-combo {
              background-color: var(--color-secondary) !important;
              color: var(--color-text) !important;
              border: 1px solid var(--color-secondary) !important;
              border-radius: 0.375rem !important;
              padding: 0.25rem 0.5rem !important;
              font-size: 0.875rem !important;
              line-height: 1.25rem !important;
              transition: background-color 0.2s ease-in-out !important;
              outline: none !important;
              display: inline-block !important;
            }
            
            .goog-te-combo:hover {
              background-color: color-mix(in srgb, var(--color-secondary) 80%, transparent) !important;
            }
            
            /* Fix option text color */
            .goog-te-combo option {
              background-color: var(--color-primary) !important;
              color: var(--color-text) !important;
            }
            
            /* Additional selector to target the "powered by" specifically */
            .goog-logo-link, 
            .goog-te-gadget-icon,
            .goog-te-banner-frame.skiptranslate,
            .goog-te-gadget-icon,
            #goog-gt-tt, 
            .goog-te-balloon-frame {
              display: none !important;
            }
            
            /* Remove all text and only keep the select dropdown */
            .goog-te-gadget {
              color: transparent !important;
            }
          </style>

          <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

          <div class="flex items-center gap-2 flex-wrap">
            <label for="font-size-slider" class="text-white text-sm text-content clamp-font-size whitespace-nowrap" data-font-size="16">Font Size:</label>
            <div class="flex items-center gap-2">
              <input type="range" id="font-size-slider" min="0" max="10" value="0" step="1" class="w-24 lg:w-32">
              <span id="font-size-value" class="text-white min-w-[3rem]">+0px</span>
            </div>
          </div>

          <%= link_to "Help", help_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 mx-2 text-content clamp-font-size", data: { font_size: 16 } %>

          <%# unified theme toggle button %>
          <%= button_tag(type: "button", id: "mode-toggle", class: "bg-secondary px-1 py-1 w-8 h-8 mr-2 rounded-md flex items-center justify-center") do %>
            <img id="mode-icon" src="https://api.iconify.design/material-symbols:clear-day-rounded.svg" alt="Toggle display mode" />
          <% end %>

          <%# logout %>
          <%= button_to "Logout", destroy_user_session_path, data: { turbo: false }, method: :delete, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
          <%# pfp %>
          <img src="<%= current_user.avatar_url %>" alt="<%= current_user.email %>" title="<%= current_user.email %>" class="h-8 w-8 rounded-full ml-2">
        </nav>
        <main class="container mx-auto mt-28 px-3 lg:px-5 flex">
          <%# create a navbar %>
            <%= yield %>
        </main>
      <% else %>
        <main class="container mx-auto mt-28 px-5 flex">

        <div class="flex flex-col mx-auto bg-primary rounded-lg shadow-md pt-7 px-8 pb-7">
          <h2 class="text-center text-2xl font-bold mb-6 text-background">Login to CapScrap</h2>
          <%- if devise_mapping.omniauthable? %>
            <%- resource_class.omniauth_providers.each do |provider| %>
              <%= button_to omniauth_authorize_path(resource_name, provider),
                  data: { turbo: false },
                  class: "w-full text-text bg-secondary hover:bg-secondary/90 focus:ring-4 focus:ring-secondary/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center justify-center dark:focus:ring-[#4285F4]/55" do %>
                <svg class="mr-2 -ml-1 w-4 h-4" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="google" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 488 512">
                  <path fill="currentColor" d="M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z"></path>
                </svg>
                Sign in with Google
              <% end %>
            <% end %>
          <% end %>
        </div>
        </main>
      <% end %>

      <script>
    document.addEventListener("DOMContentLoaded", function() {
      initializeFontSizeSystem();
      // initializeGoogleTranslate();
    });

    document.addEventListener('turbo:render', function() {
      applyStoredFontSize();
      // initializeGoogleTranslate();
    });

    document.addEventListener('turbo:before-cache', function() {
      resetFontSizesToDefault();
    });

    function initializeFontSizeSystem() {
      setupFontSizeSlider();
      setTimeout(() => {
        applyStoredFontSize();
      }, 10);
      
      // Set up mutation observer after initial setup
      setupMutationObserver();
    }

    function setupMutationObserver() {
      // Disconnect any existing observer first
      if (window.fontSizeObserver) {
        window.fontSizeObserver.disconnect();
      }
      
      // Create a new observer that's more specific to what we're looking for
      window.fontSizeObserver = new MutationObserver((mutations) => {
        let shouldUpdate = false;
        
        for (const mutation of mutations) {
          // Only process if nodes were added
          if (mutation.addedNodes.length > 0) {
            for (let i = 0; i < mutation.addedNodes.length; i++) {
              const node = mutation.addedNodes[i];
              // Only check element nodes
              if (node.nodeType === Node.ELEMENT_NODE) {
                // If it's a text container or contains text containers
                if (node.classList?.contains('text-content') || 
                    node.querySelectorAll('.text-content').length > 0) {
                  shouldUpdate = true;
                  break;
                }
              }
            }
          }
          
          if (shouldUpdate) break;
        }
        
        if (shouldUpdate) {
          // Use requestAnimationFrame to ensure DOM is ready
          requestAnimationFrame(() => {
            applyStoredFontSize();
          });
        }
      });
      
      // Observe only the main content area to reduce overhead
      const contentContainer = document.querySelector('.main-content') || document.body;
      window.fontSizeObserver.observe(contentContainer, { 
        childList: true, 
        subtree: true 
      });
    }

    function getStoredFontSize() {
      return parseInt(localStorage.getItem('font-size') || '0', 10);
    }

    function applyStoredFontSize() {
      const savedFontSize = getStoredFontSize();
      const fontSizeSlider = document.querySelector('#font-size-slider');
      const fontSizeValue = document.querySelector('#font-size-value');
      
      // Update slider if it exists
      if (fontSizeSlider) {
        fontSizeSlider.value = savedFontSize;
      }
      
      // Update the display value
      if (fontSizeValue) {
        fontSizeValue.textContent = `${savedFontSize}px`;
      }
      
      // Apply to all text containers
      document.querySelectorAll('.text-content').forEach(container => {
        // Get initial font size from data attribute or default to 16px
        const initialFontSize = parseInt(container.getAttribute('data-font-size')) || 16;
        
        // Set the adjusted font size
        container.style.fontSize = `${initialFontSize + savedFontSize}px`;
        
        // Mark this element as processed to avoid duplicate processing
        container.setAttribute('data-font-size-processed', 'true');
      });
      
      // Handle clamped font elements
      document.querySelectorAll('.clamp-font-size[data-font-size]').forEach(link => {
        const initialFontSize = parseInt(link.getAttribute('data-font-size')) || 16;
        const adjustedFontSize = initialFontSize + savedFontSize;
        link.style.fontSize = `${Math.min(18, adjustedFontSize)}px`;
        link.setAttribute('data-font-size-processed', 'true');
      });
    }

    function resetFontSizesToDefault() {
      document.querySelectorAll('.text-content, .clamp-font-size').forEach(element => {
        const defaultFontSize = element.getAttribute('data-font-size') || '16';
        element.style.fontSize = `${defaultFontSize}px`;
        
        // Remove processed flag so it will be reprocessed on next load
        element.removeAttribute('data-font-size-processed');
      });
    }

    function setupFontSizeSlider() {
      const fontSizeSlider = document.querySelector('#font-size-slider');
      if (!fontSizeSlider) return;
      
      // Remove existing listeners to avoid duplicates
      fontSizeSlider.removeEventListener('input', handleSliderInput);
      fontSizeSlider.addEventListener('input', handleSliderInput);
      
      // Initialize slider with stored value
      fontSizeSlider.value = getStoredFontSize();
    }

    function handleSliderInput() {
      localStorage.setItem('font-size', this.value);
      applyStoredFontSize();
    }
    
        document.addEventListener('turbo:load', function() {
          initializeFontSizeSystem();
         
          var modeToggle = document.getElementById('mode-toggle');
          var modeIcon = document.getElementById('mode-icon');

          function updateIcon(mode) {
            if (mode === 'light') {
              modeIcon.src = 'https://api.iconify.design/material-symbols:clear-day-rounded.svg';
            } else if (mode === 'dark') {
              modeIcon.src = 'https://api.iconify.design/material-symbols:dark-mode.svg';
            } else if (mode === 'high-contrast') {
              modeIcon.src = 'https://api.iconify.design/material-symbols:eye-tracking.svg';
            }
          }

          function applyMode(mode) {
            document.documentElement.classList.remove('dark', 'high-contrast');

            if (mode === 'dark') {
              document.documentElement.classList.add('dark');
            } else if (mode === 'high-contrast') {
              document.documentElement.classList.add('high-contrast');
            }

            localStorage.setItem('display-mode', mode);
            updateIcon(mode);
          }

          // Initialize icon based on saved mode
          var savedMode = localStorage.getItem('display-mode') || 'light';
          applyMode(savedMode);

          modeToggle.addEventListener('click', function() {
            var currentMode = localStorage.getItem('display-mode') || 'light';
            var nextMode;

            if (currentMode === 'light') {
              nextMode = 'dark';
            } else if (currentMode === 'dark') {
              nextMode = 'high-contrast';
            } else {
              nextMode = 'light';
            }

            applyMode(nextMode);
          });
        });
      </script>

  </body>
</html>
