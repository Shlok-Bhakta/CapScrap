<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Capscrap" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <style>
      /* Settings dropdown styles */
      #settings-dropdown {
        transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
        opacity: 1;
        transform: translateY(0);
      }

      #settings-dropdown.hidden {
        display: none;
        opacity: 0;
        transform: translateY(-10px);
      }

      .mode-toggle-btn {
        transition: all 0.2s ease-in-out;
        color: var(--color-text);
      }

      /* Active button indicator */
      .mode-toggle-btn.active {
        outline: 2px solid var(--color-activated, #4a90e2);
        outline-offset: -2px;
      }

      .mode-toggle-btn:hover {
        /* background-color: var(--color-secondary, rgba(var(--color-secondary), 0.8)); */
        background-color: color-mix(in srgb, var(--color-secondary) 80%, transparent);
        outline: 2px solid var(--color-coloring, #f14141);
        outline-offset: -2px;
        /* color: var(--color-texting); */
      }

      /* Responsive adjustments */
      @media (max-width: 640px) {
        #settings-dropdown {
          width: calc(100vw - 2rem);
          right: -0.5rem;
        }
      }
      
      /* Custom styles for Google Translate */
      .google-translate-container {
        margin-right: 0px;
      }
      
      /* Style the Google Translate dropdown */
      .goog-te-gadget {
        font-family: inherit !important;
        font-size: 0.875rem !important;
      }
      
      /* Hide all text in the gadget except the dropdown */
      .goog-te-gadget-simple .goog-te-menu-value span:first-child,
      .goog-te-gadget-simple .goog-te-menu-value span:last-child,
      .goog-te-gadget .goog-te-combo + span,
      .goog-te-gadget span {
        display: none !important;
      }
      
      /* Make sure the dropdown itself is still visible */
      .goog-te-combo {
        background-color: var(--color-secondary) !important;
        color: var(--color-text) !important;
        border: 1px solid var(--color-secondary) !important;
        border-radius: 0.375rem !important;
        padding: 0.25rem 0.5rem !important;
        font-size: 0.875rem !important;
        line-height: 1.25rem !important;
        transition: background-color 0.2s ease-in-out !important;
        outline: none !important;
        display: inline-block !important;
      }
      
      .goog-te-combo:hover {
        background-color: color-mix(in srgb, var(--color-secondary) 80%, transparent) !important;
      }
      
      /* Fix option text color */
      .goog-te-combo option {
        background-color: var(--color-secondary) !important;
        color: var(--color-text) !important;
      }

      .goog-te-combo option:hover {
        background-color: var(--color-primary) !important;
        color: var(--color-texting) !important;
      }
      
      /* Additional selector to target the "powered by" specifically */
      .goog-logo-link, 
      .goog-te-gadget-icon,
      .goog-te-banner-frame.skiptranslate,
      .goog-te-gadget-icon,
      #goog-gt-tt, 
      .goog-te-balloon-frame {
        display: none !important;
      }
      
      /* Remove all text and only keep the select dropdown */
      .goog-te-gadget {
        color: transparent !important;
      }

      .goog-te-menu2-item:hover,
      .goog-te-menu-frame .goog-te-menu2-item:hover {
        background-color: var(--color-primary) !important;
        color: var(--color-texting) !important;
      }
    </style>
  </head>

  <body class="bg-background text-text font-sans antialiased" data-controller="theme">
    <script>
      // KEEP THIS SCRIPT: Initial theme application to prevent FOUC
      // It's okay to keep this minimal script in the head/early body for immediate application.
      // The Stimulus controller will take over for interaction and subsequent loads.
      const savedMode = localStorage.getItem('display-mode');

      // function applyMode(mode) {
      //   document.documentElement.classList.remove('dark', 'high-contrast');

      //   if (mode === 'dark') {
      //     document.documentElement.classList.add('dark');
      //   } else if (mode === 'high-contrast') {
      //     document.documentElement.classList.add('high-contrast');
      //   }
      // }

      function applyMode(mode) {
        document.documentElement.classList.remove('dark', 'high-contrast');
        if (mode === 'dark') {
          document.documentElement.classList.add('dark');
        } else if (mode === 'high-contrast') {
          document.documentElement.classList.add('high-contrast');
        }

        localStorage.setItem('display-mode', mode);
        
        // Update active button if the dropdown exists
        updateActiveButton();
      }

      if (savedMode) {
        applyInitialMode(savedMode);
      } else {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          // Don't save here, let Stimulus handle saving later if needed
          applyInitialMode('dark');
        } else {
          applyInitialMode('light');
        }
      }
    </script>

      <% if current_user %>
        <nav class="flex flex-wrap bg-primary px-4 py-2 shadow-md min-h-[3rem] items-center gap-2">
          <%# logo %>
          <%= image_tag "logo.png", class: "h-8 aspect-auto order-first" %>
          <%# spacer to push content to the middle %>
          <div class="flex-1 hidden lg:block"></div>
          <%# navigate to items depending on the user %>
          <%# Student role (1) has no specific navigation links %>
          <%# Show admin links for Professor (3) and Teaching Assistant (2) %>
          <% if [2, 3].include?(current_user.role_id) %>
            <%# teacher %>
            <div class="flex flex-wrap gap-2 w-full lg:w-auto order-last lg:order-none">
              <%= link_to "View Items", admin_dashboard_items_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Users", admin_dashboard_users_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Renting", admin_dashboard_renting_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
              <%= link_to "View Purchased", admin_dashboard_purchased_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
            </div>
          <% end %>
          <%# spacer to push content to the right %>
          <div class="flex-1 hidden lg:block"></div>

          <!-- Settings Dropdown Menu - Replaces the individual settings controls -->
          <div class="relative">
            <button id="settings-dropdown-button" class="text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-3 py-1.5 flex items-center gap-2 text-content clamp-font-size" data-font-size="16">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-content clamp-font-size" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
              </svg>
              Settings
            </button>

            <div id="settings-dropdown" class="hidden absolute right-0 mt-2 w-64 bg-primary rounded-md shadow-lg z-10 p-4 border border-secondary/30">
              <!-- Google Translate -->
              <div class="mb-4">
                <label class="block text-texting mb-2 text-sm font-medium text-content clamp-font-size">Language:</label>
                <div id="google_translate_element" class="google-translate-container"></div>
              </div>
              
              <!-- Font Size Control -->
              <div class="mb-4">
                <label for="font-size-slider" class="block text-texting mb-2 text-sm font-medium text-content clamp-font-size">Font Size:</label>
                <div class="flex items-center gap-2">
                  <input type="range" id="font-size-slider" min="0" max="10" value="0" step="1" class="w-32">
                  <span id="font-size-value" class="text-texting min-w-[3rem] text-content clamp-font-size">+0px</span>
                </div>
              </div>
              
              <!-- Display Mode Toggle -->
              <div>
                <label class="block text-texting mb-2 text-sm font-medium text-content clamp-font-size">Display Mode:</label>
                <div class="flex gap-2">
                  <button class="mode-toggle-btn bg-secondary px-2 py-1 rounded-md flex items-center justify-center gap-1" data-mode="light">
                    <img src="https://api.iconify.design/material-symbols:clear-day-rounded.svg" alt="Light mode" class="w-5 h-5">
                    <span class="text-sm text-content clamp-font-size">Light</span>
                  </button>
                  <button class="mode-toggle-btn bg-secondary px-2 py-1 rounded-md flex items-center justify-center gap-1" data-mode="dark">
                    <img src="https://api.iconify.design/material-symbols:dark-mode.svg" alt="Dark mode" class="w-5 h-5">
                    <span class="text-sm text-content clamp-font-size">Dark</span>
                  </button>
                  <button class="mode-toggle-btn bg-secondary px-2 py-1 rounded-md flex items-center justify-center gap-1" data-mode="high-contrast">
                    <img src="https://api.iconify.design/material-symbols:eye-tracking.svg" alt="High contrast mode" class="w-5 h-5">
                    <span class="text-sm text-content clamp-font-size">HC</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <%= link_to "Help", help_path, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 mx-2 text-content clamp-font-size", data: { font_size: 16 } %>
          <%# logout %>
          <%= button_to "Logout", destroy_user_session_path, data: { turbo: false }, method: :delete, class: "text-text font-medium bg-secondary hover:bg-secondary/80 transition-all duration-200 border border-secondary/90 rounded-md px-2 py-1 text-content clamp-font-size", data: { font_size: 16 } %>
          <%# pfp %>
          <img src="<%= current_user.avatar_url %>" alt="<%= current_user.email %>" title="<%= current_user.email %>" class="h-8 w-8 rounded-full ml-2">
        </nav>
        <main class="container mx-auto mt-28 px-3 lg:px-5 flex">
          <%# create a navbar %>
            <%= yield %>
        </main>
      <% else %>
        <main class="container mx-auto mt-28 px-5 flex">

        <div class="flex flex-col mx-auto bg-primary rounded-lg shadow-md pt-7 px-8 pb-7">
          <h2 class="text-center text-2xl font-bold mb-6 text-background">Login to CapScrap</h2>
          <%- if devise_mapping.omniauthable? %>
            <%- resource_class.omniauth_providers.each do |provider| %>
              <%= button_to omniauth_authorize_path(resource_name, provider),
                  data: { turbo: false },
                  class: "w-full text-text bg-secondary hover:bg-secondary/90 focus:ring-4 focus:ring-secondary/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center justify-center dark:focus:ring-[#4285F4]/55" do %>
                <svg class="mr-2 -ml-1 w-4 h-4" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="google" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 488 512">
                  <path fill="currentColor" d="M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z"></path>
                </svg>
                Sign in with Google
              <% end %>
            <% end %>
          <% end %>
        </div>
        </main>
      <% end %>

      <script>
    document.addEventListener("DOMContentLoaded", function() {
      initializeFontSizeSystem();
      initializeSettingsDropdown();
      // initializeGoogleTranslate();
    });

    document.addEventListener('turbo:render', function() {
      applyStoredFontSize();
      // initializeGoogleTranslate();
      initializeSettingsDropdown();
    });

    document.addEventListener('turbo:before-cache', function() {
      resetFontSizesToDefault();
    });

    document.addEventListener('turbo:load', function() {
      initializeFontSizeSystem();
      initializeSettingsDropdown();
     
      var modeToggle = document.getElementById('mode-toggle');
      var modeIcon = document.getElementById('mode-icon');

      function updateIcon(mode) {
        if (mode === 'light') {
          modeIcon.src = 'https://api.iconify.design/material-symbols:clear-day-rounded.svg';
        } else if (mode === 'dark') {
          modeIcon.src = 'https://api.iconify.design/material-symbols:dark-mode.svg';
        } else if (mode === 'high-contrast') {
          modeIcon.src = 'https://api.iconify.design/material-symbols:eye-tracking.svg';
        }
      }

      function applyMode(mode) {
        document.documentElement.classList.remove('dark', 'high-contrast');

        if (mode === 'dark') {
          document.documentElement.classList.add('dark');
        } else if (mode === 'high-contrast') {
          document.documentElement.classList.add('high-contrast');
        }

        localStorage.setItem('display-mode', mode);
        updateIcon(mode);
      }

      // Initialize icon based on saved mode
      var savedMode = localStorage.getItem('display-mode') || 'light';
      applyMode(savedMode);

      modeToggle.addEventListener('click', function() {
        var currentMode = localStorage.getItem('display-mode') || 'light';
        var nextMode;

        if (currentMode === 'light') {
          nextMode = 'dark';
        } else if (currentMode === 'dark') {
          nextMode = 'high-contrast';
        } else {
          nextMode = 'light';
        }

        applyMode(nextMode);
      });
    });

    // Settings dropdown functionality
    function initializeSettingsDropdown() {
      const dropdownButton = document.getElementById('settings-dropdown-button');
      const dropdown = document.getElementById('settings-dropdown');
      
      if (!dropdownButton || !dropdown) return;
      
      // Toggle dropdown visibility when button is clicked
      dropdownButton.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdown.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!dropdown.contains(e.target) && e.target !== dropdownButton) {
          dropdown.classList.add('hidden');
        }
      });
      
      // Initialize mode toggle buttons
      const modeButtons = document.querySelectorAll('.mode-toggle-btn');
      modeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          const mode = this.getAttribute('data-mode');
          applyMode(mode);
          dropdown.classList.add('hidden');  // Close dropdown after selection
        });
      });
      
      // Highlight active mode button
      updateActiveButton();
    }

    function updateActiveButton() {
      const currentMode = localStorage.getItem('display-mode') || 'light';
      document.querySelectorAll('.mode-toggle-btn').forEach(btn => {
        const btnMode = btn.getAttribute('data-mode');
        if (btnMode === currentMode) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }

    function initializeFontSizeSystem() {
      setupFontSizeSlider();
      setTimeout(() => {
        applyStoredFontSize();
      }, 10);
      
      // Set up mutation observer after initial setup
      setupMutationObserver();
    }

    function setupMutationObserver() {
      // Disconnect any existing observer first
      if (window.fontSizeObserver) {
        window.fontSizeObserver.disconnect();
      }
      
      // Create a new observer that's more specific to what we're looking for
      window.fontSizeObserver = new MutationObserver((mutations) => {
        let shouldUpdate = false;
        
        for (const mutation of mutations) {
          // Only process if nodes were added
          if (mutation.addedNodes.length > 0) {
            for (let i = 0; i < mutation.addedNodes.length; i++) {
              const node = mutation.addedNodes[i];
              // Only check element nodes
              if (node.nodeType === Node.ELEMENT_NODE) {
                // If it's a text container or contains text containers
                if (node.classList?.contains('text-content') || 
                    node.querySelectorAll('.text-content').length > 0) {
                  shouldUpdate = true;
                  break;
                }
              }
            }
          }
          
          if (shouldUpdate) break;
        }
        
        if (shouldUpdate) {
          // Use requestAnimationFrame to ensure DOM is ready
          requestAnimationFrame(() => {
            applyStoredFontSize();
          });
        }
      });
      
      // Observe only the main content area to reduce overhead
      const contentContainer = document.querySelector('.main-content') || document.body;
      window.fontSizeObserver.observe(contentContainer, { 
        childList: true, 
        subtree: true 
      });
    }

    function getStoredFontSize() {
      return parseInt(localStorage.getItem('font-size') || '0', 10);
    }

    function applyStoredFontSize() {
      const savedFontSize = getStoredFontSize();
      const fontSizeSlider = document.querySelector('#font-size-slider');
      const fontSizeValue = document.querySelector('#font-size-value');
      
      // Update slider if it exists
      if (fontSizeSlider) {
        fontSizeSlider.value = savedFontSize;
      }
      
      // Update the display value
      if (fontSizeValue) {
        fontSizeValue.textContent = `${savedFontSize}px`;
      }
      
      // Apply to all text containers
      document.querySelectorAll('.text-content').forEach(container => {
        // Get initial font size from data attribute or default to 16px
        const initialFontSize = parseInt(container.getAttribute('data-font-size')) || 16;
        
        // Set the adjusted font size
        container.style.fontSize = `${initialFontSize + savedFontSize}px`;
        
        // Mark this element as processed to avoid duplicate processing
        container.setAttribute('data-font-size-processed', 'true');
      });
      
      // Handle clamped font elements
      document.querySelectorAll('.clamp-font-size[data-font-size]').forEach(link => {
        const initialFontSize = parseInt(link.getAttribute('data-font-size')) || 16;
        const adjustedFontSize = initialFontSize + savedFontSize;
        link.style.fontSize = `${Math.min(20, adjustedFontSize)}px`;
        link.setAttribute('data-font-size-processed', 'true');
      });
    }

    function resetFontSizesToDefault() {
      document.querySelectorAll('.text-content, .clamp-font-size').forEach(element => {
        const defaultFontSize = element.getAttribute('data-font-size') || '16';
        element.style.fontSize = `${defaultFontSize}px`;
        
        // Remove processed flag so it will be reprocessed on next load
        element.removeAttribute('data-font-size-processed');
      });
    }

    function setupFontSizeSlider() {
      const fontSizeSlider = document.querySelector('#font-size-slider');
      if (!fontSizeSlider) return;
      
      // Remove existing listeners to avoid duplicates
      fontSizeSlider.removeEventListener('input', handleSliderInput);
      fontSizeSlider.addEventListener('input', handleSliderInput);
      
      // Initialize slider with stored value
      fontSizeSlider.value = getStoredFontSize();
    }

    function handleSliderInput() {
      localStorage.setItem('font-size', this.value);
      applyStoredFontSize();
    }
    
    // Google Translate code is kept intact
    function googleTranslateElementInit() {
      new google.translate.TranslateElement({
        pageLanguage: 'en',          // Default page language is English
        includedLanguages: 'hi,nl,de,en,es,fr,it,ja,zh-CN',
        layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL,
        autoDisplay: false
      }, 'google_translate_element');
      
      // Force English on first visit if no language cookie exists
      if (!readCookie('googtrans')) {
        // English is actually the default, so we don't need to do anything here
        // But if you wanted to force another language by default, you could use:
        // document.cookie = 'googtrans=/en/fr; path=/; domain=' + document.domain;
      }
    }
    
    // Helper function to read cookies
    function readCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for(var i=0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    }
    
    // Add event listener to execute after page loads
    document.addEventListener('turbolinks:load', function() {
      // This ensures the widget reflects the saved language after page navigation with Turbolinks
      if (window.google && window.google.translate) {
        // Refresh the Google Translate widget if needed
        if (typeof window.google.translate.TranslateElement !== 'undefined') {
          new google.translate.TranslateElement({
            pageLanguage: 'en',
            includedLanguages: 'hi,nl,de,en,es,fr,it,ja,zh-CN',
            layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL,
            autoDisplay: false
          }, 'google_translate_element');
        }
      }
    });


      // Ensure Google Translate doesn't break our functionality
        window.googleTranslateElementInit = function() {
          new google.translate.TranslateElement({
            pageLanguage: 'en',
            includedLanguages: 'hi,nl,de,en,es,fr,it,ja,zh-CN',
            layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL,
            autoDisplay: false
          }, 'google_translate_element');
          
          // Re-initialize our dropdown after Google Translate loads
          setTimeout(initializeSettingsDropdown, 500);
        };
      </script>
      
      <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

  </body>
</html>
