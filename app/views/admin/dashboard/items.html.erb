<%# protection to ensure only teachers can access this page %>
<% if current_user.role_id == 3 %>
  <div class="flex flex-col w-full h-full">
    <%# Page Header %>
    <div class="mb-8">
      <h1 class="text-2xl md:text-3xl font-bold text-text mb-2 text-content" data-font-size="24">Item Management</h1>
      <p class="text-text/70 text-content" data-font-size="16">Add, edit and manage your inventory items</p>
    </div>
    
    <%# Search Section %>
    <div class="mb-8 w-full bg-primary/10 rounded-lg p-4 shadow-sm">
      <h2 class="text-lg font-semibold mb-3 text-text text-content flex items-center" data-font-size="18">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        Search Items
      </h2>
      <%= form_with url: admin_dashboard_items_path, method: :get, data: { turbo_frame: "items_table", turbo_action: "advance" } do |f| %>
        <div class="flex flex-col sm:flex-row gap-3">
          <%= f.text_field :query,
              placeholder: "Search by description, location or category...",
              class: "p-3 border border-primary/20 rounded-lg w-full focus:ring-2 focus:ring-primary/30 focus:outline-none text-content transition-all duration-200",
              "data-font-size": { font_size: 16 },
              data: {
                controller: "search",
                action: "input->search#search"
              } %>
          <button type="submit" class="bg-primary hover:bg-primary/90 text-background px-4 py-2 rounded-lg shadow-sm transition-all duration-200 whitespace-nowrap sm:w-auto w-full">
            Search
          </button>
        </div>
      <% end %>
    </div>

    <%# Add New Item Section %>
    <div class="bg-secondary/20 rounded-lg p-6 mb-8 w-full border border-secondary/30 shadow-sm">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-semibold text-text text-content flex items-center" data-font-size="18">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add New Item
        </h2>
        <button type="button" id="toggleNewItemForm" class="text-primary hover:text-primary/80 text-sm flex items-center transition-all duration-200">
          <span id="formToggleText">Hide Form</span>
          <svg id="formToggleIcon" class="w-4 h-4 ml-1 transform rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
      </div>
      
      <div data-controller="item-form" id="newItemForm" class="w-full">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Description</label>
            <input type="text" 
                   placeholder="Enter item description"
                   class="w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content"
                   data-item-form-target="description"
                   data-font-size="16">
          </div>

          <div>
            <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Location</label>
            <input type="text" 
                   placeholder="Enter item location"
                   class="w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content"
                   data-item-form-target="location"
                   data-font-size="16">
          </div>

          <div>
            <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Category</label>
            <select class="w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content"
                    data-item-form-target="category"
                    data-font-size="16">
              <option value="">Select Category</option>
              <% @categories.each do |category| %>
                <option value="<%= category.id %>"><%= category.name %></option>
              <% end %>
            </select>
          </div>
        </div>
        
        <div class="mt-4 flex justify-end">
          <button type="button"
                  class="px-6 py-3 bg-confirm hover:bg-confirm-hover text-text rounded-lg shadow-sm text-content transition-all duration-200 flex items-center"
                  data-action="click->item-form#createItem"
                  data-font-size="16">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Create Item
          </button>
        </div>
      </div>
    </div>

    <%# Items Table Section %>
    <div class="w-full bg-background rounded-lg shadow-sm border border-primary/10 p-4">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-semibold text-text text-content flex items-center" data-font-size="18">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          Item List
        </h2>
      </div>
      
      <%= turbo_frame_tag "items_table" do %>
        <%= render partial: "items_table",
                  locals: {
                    items: @items,
                    categories: @categories,
                    sort_field: params[:sort],
                    sort_direction: params[:direction],
                    pagy: @pagy
                  } %>
      <% end %>
    </div>
  </div>

  <script>
    // Toggle new item form visibility with Turbo navigation support
    document.addEventListener('DOMContentLoaded', initializeItemsPage);
    document.addEventListener('turbo:load', initializeItemsPage);
    document.addEventListener('turbo:render', initializeItemsPage);
    
    function initializeItemsPage() {
      initializeFormToggle();
      initializeItemCreation();
    }
    
    function initializeFormToggle() {
      const toggleBtn = document.getElementById('toggleNewItemForm');
      const formContainer = document.getElementById('newItemForm');
      
      // Exit if elements don't exist on this page
      if (!toggleBtn || !formContainer) return;
      
      const toggleText = document.getElementById('formToggleText');
      const toggleIcon = document.getElementById('formToggleIcon');
      
      // Set initial state to match UI (form shown by default)
      let isFormVisible = true;
      
      // Remove previous event listeners to prevent duplicates
      toggleBtn.removeEventListener('click', toggleForm);
      
      // Re-add event listener
      toggleBtn.addEventListener('click', toggleForm);
      
      function toggleForm() {
        isFormVisible = !isFormVisible;
        
        if (isFormVisible) {
          formContainer.classList.remove('hidden');
          toggleText.textContent = 'Hide Form';
          toggleIcon.classList.add('rotate-180');
        } else {
          formContainer.classList.add('hidden');
          toggleText.textContent = 'Show Form';
          toggleIcon.classList.remove('rotate-180');
        }
      }
    }
    
    function initializeItemCreation() {
      // Fix for create item button - ensure it properly submits
      document.addEventListener('item-form:create-error', function(e) {
        console.error('Item creation failed:', e.detail);
        alert('Failed to create item. Please check your inputs and try again.');
      });
    }
  </script>

  <%# Fallback JavaScript if Stimulus isn't handling the createItem action %>
  <script>
    document.addEventListener('DOMContentLoaded', initializeFallback);
    document.addEventListener('turbo:load', initializeFallback);
    document.addEventListener('turbo:render', initializeFallback);
    
    function initializeFallback() {
      const createItemBtn = document.querySelector('[data-action="click->item-form#createItem"]');
      
      // Exit if button doesn't exist or Stimulus is handling it
      if (!createItemBtn || window.StimulusReflex) return;
      
      // Remove previous event listeners to prevent duplicates
      createItemBtn.removeEventListener('click', handleItemCreation);
      
      // Re-add event listener
      createItemBtn.addEventListener('click', handleItemCreation);
    }
    
    function handleItemCreation() {
      const descriptionInput = document.querySelector('[data-item-form-target="description"]');
      const locationInput = document.querySelector('[data-item-form-target="location"]');
      const categoryInput = document.querySelector('[data-item-form-target="category"]');
      
      if (!descriptionInput.value || !locationInput.value || !categoryInput.value) {
        alert('Please fill in all fields');
        return;
      }
      
      // Create form data
      const formData = new FormData();
      formData.append('item[description]', descriptionInput.value);
      formData.append('item[location]', locationInput.value);
      formData.append('item[category_id]', categoryInput.value);
      
      // Send fetch request
      fetch('/admin/dashboard/create_item', {
        method: 'POST',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: formData
      })
      .then(response => {
        if (response.ok) {
          // Reload the items list
          window.location.reload();
        } else {
          throw new Error('Failed to create item');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Failed to create item. Please try again.');
      });
    }
  </script>
<% else %>
  <div class="flex items-center justify-center h-full">
    <div class="bg-error/10 border border-error/20 rounded-lg p-8 text-center max-w-md">
      <svg class="w-16 h-16 mx-auto text-error mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
      </svg>
      <h1 class="font-bold text-2xl text-content mb-2" data-font-size="24">Access Denied</h1>
      <p class="text-text/70">You don't have permission to view this page. Please contact an administrator if you believe this is an error.</p>
    </div>
  </div>
<% end %>
