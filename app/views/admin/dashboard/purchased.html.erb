<%# protection to ensure only teachers can access this page %>
<% if current_user.role_id == 3 %>
  <div class="flex flex-col w-full" data-controller="purchase-search">
    <%# Page Header %>
    <div class="mb-8">
      <h1 class="text-2xl md:text-3xl font-bold text-text mb-2 text-content" data-font-size="24">Purchase Management</h1>
      <p class="text-text/70 text-content" data-font-size="16">Add and manage your inventory purchases</p>
    </div>
    
    <%# Search Section %>
    <div class="mb-8 w-full bg-primary/10 rounded-lg p-4 shadow-sm">
      <h2 class="text-lg font-semibold mb-3 text-text text-content flex items-center" data-font-size="18">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        Search Purchases
      </h2>
      <%= form_with url: admin_dashboard_purchased_path, method: :get, data: { turbo_frame: "content" } do |f| %>
        <div class="flex flex-col sm:flex-row gap-3">
          <%= f.text_field :query,
              placeholder: "Enter item description or category",
              value: params[:query],
              data: { controller: "search", action: "input->search#search" },
              class: "p-3 border border-primary/20 rounded-lg w-full focus:ring-2 focus:ring-primary/30 focus:outline-none text-content transition-all duration-200",
              "data-font-size": { font_size: 16 } %>
          <button type="submit" class="bg-primary hover:bg-primary/90 text-background px-4 py-2 rounded-lg shadow-sm transition-all duration-200 whitespace-nowrap sm:w-auto w-full">
            Search
          </button>
        </div>
      <% end %>
    </div>

    <%# Add New Purchase Section %>
    <div class="bg-secondary/20 rounded-lg p-6 mb-8 w-full border border-secondary/30 shadow-sm">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-semibold text-text text-content flex items-center" data-font-size="18">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add New Purchase
        </h2>
        <button type="button" id="toggleNewPurchaseForm" class="text-primary hover:text-primary/80 text-sm flex items-center transition-all duration-200">
          <span id="formToggleText">Hide Form</span>
          <svg id="formToggleIcon" class="w-4 h-4 ml-1 transform rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
      </div>
      
      <div id="newPurchaseForm" class="w-full">
        <%= form_with url: admin_dashboard_create_purchase_path, class: "flex flex-col gap-4 w-full" do |f| %>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="relative md:col-span-2">
              <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Item</label>
              <%= f.text_field :item_query,
                  placeholder: "Enter item description",
                  class: "w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content transition-all duration-200",
                  "data-font-size": { font_size: 16 },
                  required: true,
                  data: {
                    purchase_search_target: "itemField",
                    action: "input->purchase-search#searchItems"
                  } %>
              <div data-purchase-search-target="suggestions" class="hidden absolute w-full bg-background border border-primary/20 rounded-lg mt-1 max-h-60 overflow-y-auto z-10 shadow-lg">
              </div>
            </div>

            <div class="flex-none">
              <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Quantity</label>
              <%= f.number_field :purchased_quantity,
                  placeholder: "Enter amount",
                  min: 1,
                  class: "w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content transition-all duration-200",
                  "data-font-size": { font_size: 16 },
                  required: true %>
            </div>

            <div data-purchase-search-target="newItemFields" class="hidden md:col-span-3 grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Location</label>
                <%= f.text_field :location,
                    placeholder: "Enter storage location",
                    class: "w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content transition-all duration-200",
                    "data-font-size": { font_size: 16 }%>
              </div>

              <div>
                <label class="block text-sm font-medium mb-1 text-text/80 text-content" data-font-size="14">Category</label>
                <%= f.select :category_id,
                    @categories.map { |c| [c.name, c.id] },
                    { prompt: "Select a category" },
                    class: "w-full p-3 border border-primary/20 rounded-lg focus:ring-2 focus:ring-primary/30 focus:outline-none text-content transition-all duration-200",
                    "data-font-size": { font_size: 16 } %>
              </div>
            </div>
          </div>

          <div class="mt-4 flex justify-end">
            <%= f.submit "Create Purchase",
                class: "px-6 py-3 bg-confirm hover:bg-confirm-hover text-text rounded-lg shadow-sm text-content transition-all duration-200 flex items-center",
                "data-font-size": { font_size: 16 } %>
          </div>
        <% end %>
      </div>
    </div>

    <%# Purchases Table Section %>
    <div class="w-full bg-background rounded-lg shadow-sm border border-primary/10 p-4">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-semibold text-text text-content flex items-center" data-font-size="18">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          Purchase History
        </h2>
      </div>
      
      <%= turbo_frame_tag "content" do %>
        <%= render partial: "purchases_table",
                  locals: {
                    purchases: @purchases,
                    sort_field: params[:sort],
                    sort_direction: params[:direction],
                    pagy: @pagy
                  } %>
      <% end %>
    </div>
  </div>

  <%# Toast notification container %>
  <div id="toast-container" class="fixed bottom-4 right-4 z-50 flex flex-col gap-2"></div>

  <script>
    // Toggle new purchase form visibility and handle Turbo navigation
    document.addEventListener('DOMContentLoaded', initializePage);
    document.addEventListener('turbo:load', initializePage);
    document.addEventListener('turbo:render', initializePage);
    
    function initializePage() {
      initializeFormToggle();
      initializeSelectElements();
      initializeAutoComplete();
      initializeResponsiveBehavior();
    }
    
    function initializeFormToggle() {
      const toggleBtn = document.getElementById('toggleNewPurchaseForm');
      const formContainer = document.getElementById('newPurchaseForm');
      
      // Exit if elements don't exist on this page
      if (!toggleBtn || !formContainer) return;
      
      const toggleText = document.getElementById('formToggleText');
      const toggleIcon = document.getElementById('formToggleIcon');
      
      // Set initial state to match UI (form shown by default)
      let isFormVisible = true;
      
      // Remove previous event listeners to prevent duplicates
      toggleBtn.removeEventListener('click', toggleForm);
      
      // Re-add event listener
      toggleBtn.addEventListener('click', toggleForm);
      
      function toggleForm() {
        isFormVisible = !isFormVisible;
        
        if (isFormVisible) {
          formContainer.classList.remove('hidden');
          toggleText.textContent = 'Hide Form';
          toggleIcon.classList.add('rotate-180');
        } else {
          formContainer.classList.add('hidden');
          toggleText.textContent = 'Show Form';
          toggleIcon.classList.remove('rotate-180');
        }
      }
    }
    
    // Reinitialize select elements to ensure they work after navigation
    function initializeSelectElements() {
      // Find all select elements that might need reinitialization
      const selects = document.querySelectorAll('select');
      
      selects.forEach(select => {
        // Remove existing event listeners first
        select.removeEventListener('focus', addRingClass);
        select.removeEventListener('blur', removeRingClass);
        
        // Add new event listeners
        select.addEventListener('focus', addRingClass);
        select.addEventListener('blur', removeRingClass);
        
        function addRingClass() {
          select.classList.add('ring-2', 'ring-primary/30');
        }
        
        function removeRingClass() {
          select.classList.remove('ring-2', 'ring-primary/30');
        }
      });
    }
    
    function initializeResponsiveBehavior() {
      // Handle responsive view for tables/cards if they exist
      const tableContainer = document.querySelector('.overflow-x-auto');
      const cardsContainer = document.querySelector('.lg\\:hidden');
      
      if (tableContainer && cardsContainer) {
        handleResponsiveView();
        
        // Check on resize
        window.removeEventListener('resize', handleResponsiveView);
        window.addEventListener('resize', handleResponsiveView);
      }
      
      function handleResponsiveView() {
        if (window.innerWidth < 1024) { // lg breakpoint in Tailwind
          tableContainer.classList.add('hidden');
          cardsContainer.classList.remove('lg:hidden');
        } else {
          tableContainer.classList.remove('hidden');
          cardsContainer.classList.add('lg:hidden');
        }
      }
    }
    
    function initializeAutoComplete() {
      // This function helps with the purchase search functionality
      const purchaseSearchController = document.querySelector('[data-controller="purchase-search"]');
      
      if (purchaseSearchController) {
        const itemField = purchaseSearchController.querySelector('[data-purchase-search-target="itemField"]');
        
        if (itemField) {
          // Reset field and hide suggestions
          const suggestions = purchaseSearchController.querySelector('[data-purchase-search-target="suggestions"]');
          if (suggestions) {
            suggestions.classList.add('hidden');
          }
          
          // Handle new item fields visibility
          const newItemFields = purchaseSearchController.querySelector('[data-purchase-search-target="newItemFields"]');
          if (newItemFields) {
            if (!itemField.value || itemField.dataset.existingItem === 'true') {
              newItemFields.classList.add('hidden');
            }
          }
        }
      }
    }

    // Toast notification function
    window.showToast = function(message, type = 'success') {
      const toastContainer = document.getElementById('toast-container');
      
      // Create toast element
      const toast = document.createElement('div');
      
      // Set base classes
      toast.className = 'flex items-center p-3 rounded-lg shadow-lg transform transition-all duration-300 max-w-xs backdrop-blur-sm';
      
      // Set type-specific classes and icon
      let icon = '';
      if (type === 'success') {
        toast.className += ' bg-confirm/90 text-text border border-confirm';
        icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
      } else if (type === 'error') {
        toast.className += ' bg-error/90 text-text border border-error';
        icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
      } else if (type === 'warning') {
        toast.className += ' bg-warning/90 text-text border border-warning';
        icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>';
      } else if (type === 'info') {
        toast.className += ' bg-info/90 text-text border border-info';
        icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
      }
      
      // Set content
      toast.innerHTML = `
        <div class="flex items-center">
          ${icon}
          <span class="text-sm font-medium">${message}</span>
        </div>
        <button class="ml-auto text-text/80 hover:text-text transition-colors" onclick="this.parentElement.remove()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      `;
      
      // Add to container
      toastContainer.appendChild(toast);
      
      // Animate in
      setTimeout(() => {
        toast.classList.add('translate-y-0', 'opacity-100');
      }, 10);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        toast.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 300);
      }, 5000);
    };
    
    // Listen for form submission
    document.addEventListener('turbo:submit-end', function(event) {
      const form = event.target;
      
      // Check for purchase creation form
      if (form.action && form.action.includes("create_purchase")) {
        showToast("Purchase created successfully!", "success");
      }
      
      // Listen for purchase updates
      document.addEventListener('purchase:updated', function(event) {
        if (event.detail && event.detail.success) {
          showToast("Purchase updated successfully!", "success");
        } else {
          showToast("Failed to update purchase. Please try again.", "error");
        }
      });
      
      // Listen for purchase deletions
      document.addEventListener('purchase:deleted', function(event) {
        if (event.detail && event.detail.success) {
          showToast("Purchase deleted successfully!", "info");
        } else {
          showToast("Failed to delete purchase. Please try again.", "error");
        }
      });
    });
    
    // Handle failed form submissions
    document.addEventListener('turbo:submit-error', function(event) {
      showToast("Error: Operation failed. Please try again.", "error");
    });
  </script>
<% else %>
  <div class="flex items-center justify-center h-full">
    <div class="bg-error/10 border border-error/20 rounded-lg p-8 text-center max-w-md">
      <svg class="w-16 h-16 mx-auto text-error mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
      </svg>
      <h1 class="font-bold text-2xl text-content mb-2" data-font-size="24">Access Denied</h1>
      <p class="text-text/70">You don't have permission to view this page. Please contact an administrator if you believe this is an error.</p>
    </div>
  </div>
<% end %>
